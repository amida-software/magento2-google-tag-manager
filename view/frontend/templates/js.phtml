<?php
/**
 * Copyright © MagePal LLC. All rights reserved.
 * See COPYING.txt for license details.
 * http://www.magepal.com | support@magepal.com
 */

/** @var $block MagePal\GoogleTagManager\Block\DataLayer **/
$dataLayerName = $block->getDataLayerName();
$accountId = $block->getAccountId();
$containerCode = $block->getEmbeddedCode();
?>

<!-- Google Tag Manager by MagePal -->
<script type="text/javascript">
    window.<?= /* @noEscape */ $dataLayerName ?> = window.<?= /* @noEscape */ $dataLayerName ?> || [];
    window.<?= /* @noEscape */ $dataLayerName ?>.push({ ecommerce: null });

<?php if (!$block->isGdprEnabled() && $block->addJsInHead() && !$block->isAdvancedSettingsEnabled()): ?>
    <?= /* @noEscape */ $block->getDataLayerJs() ?>
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
            new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
        j=d.createElement(s),dl=l!='<?= /* @noEscape */ $dataLayerName ?>'?'&l='+l:'';j.async=true;j.src=
        'https://www.googletagmanager.com/gtm.js?id='+i+dl<?= /* @noEscape */ $containerCode ? "+'{$containerCode}'" : '' ?>;f.parentNode.insertBefore(j,f);
    })(window,document,'script','<?= /* @noEscape */ $dataLayerName ?>','<?= /* @noEscape */ $accountId ?>');
<?php endif; ?>
</script>

<?php if ($block->isAdvancedSettingsEnabled()): ?>
    <?= /* @noEscape */ $block->getDataLayerJs() ?>
    <?= /* @noEscape */ $block->getAdvancedSettingsJsCode() ?>
<?php endif; ?>

<?php if (($block->isGdprEnabled() || !$block->addJsInHead()) && !$block->isAdvancedSettingsEnabled()) : ?>
<script type="text/x-magento-init">
    {
        "*": {
            "magepalGtmDatalayer": {
                "isCookieRestrictionModeEnabled": <?= /* @noEscape */ $block->isCookieRestrictionModeEnabled() ?>,
                "currentWebsite": <?= /* @noEscape */ $block->getCurrentWebsiteId() ?>,
                "cookieName": "<?= /* @noEscape */ $block->getCookieRestrictionName() ?>",
                "dataLayer": "<?= /* @noEscape */ $block->getDataLayerName() ?>",
                "accountId": "<?= /* @noEscape */ $block->getAccountId() ?>",
                "data": <?= /* @noEscape */ $block->getDataLayerJson() ?>,
                "isGdprEnabled": <?= /* @noEscape */ $block->isGdprEnabled() ?>,
                "gdprOption": <?= /* @noEscape */ $block->getGdprOption() ?>,
                "addJsInHeader": <?= /* @noEscape */ $block->addJsInHead() ?>,
                "containerCode": "<?= /* @noEscape */ $block->getEmbeddedCode() ?>"
            }
        }
    }
</script>
<?php else : ?>
<script type="text/x-magento-init">
    {
        "*": {
            "magepalGtmDatalayer": {
                "dataLayer": "<?= /* @noEscape */ $block->getDataLayerName() ?>"
            }
        }
    }
</script>
<?php $block->clearDataLayerSessionInfo(); ?>
<?php endif; ?>
<script>
    (function () {
        if (window.__gtmHookInstalled) return;
        window.__gtmHookInstalled = true;

        const dataLayerName = <?= json_encode($dataLayerName) ?>;
        const cartEventEndpoint = <?= json_encode($block->getUrl('gtm/cart/event')) ?>;
        const DEBUG = (localStorage.getItem('gtmDebug') === '1');
        const LOGIN_FLAG = '__gtmLoginPending';

        function log(){ if(DEBUG) try{ console.log('[GTM]', ...arguments); }catch(e){} }
        function group(t, p){ if(!DEBUG) return; try{ console.groupCollapsed(t); if(p!==undefined) console.log(p); console.groupEnd(); }catch(e){} }
        function dl(){ window[dataLayerName]=window[dataLayerName]||[]; return window[dataLayerName]; }

        (function patchDL(){
            const layer = dl();
            if (layer.__patched) return;
            const orig = layer.push.bind(layer);
            layer.push = function(){
                for (const arg of arguments){
                    const ev = arg && arg.event ? ` ${arg.event}` : '';
                    group(`[DL] push${ev}`, arg);
                }
                return orig(...arguments);
            };
            layer.__patched = true;
        })();

        function isCart(url){ url=String(url||''); return /\/checkout\/(?:cart\/(?:add|delete|update|updateItemQty|remove)|sidebar\/(?:updateItemQty|removeItem))/.test(url); }
        function isOtpCreate(url){ url=String(url||''); return /\/otplogin\/account\/sendotpcreate/i.test(url); }
        function isLoginPost(url){ url=String(url||''); return /\/customer\/account\/loginPost(?:\/|\?|$)/i.test(url); }
        function isOtpLogin(url){ url=String(url||''); return /\/otplogin\/account\/otplogin(?:\/|\?|$)/i.test(url); }

        function pingCart(origUrl){
            const url = cartEventEndpoint + '?src=' + encodeURIComponent(origUrl || '');
            group('[cart] ping → ' + url);
            fetch(url, {credentials:'same-origin'})
                .then(r=>r.json())
                .then(payload=>{
                    if(!payload || !payload.event){ log('[cart] skip'); return; }
                    group('[cart] payload', payload);
                    const layer = dl();
                    layer.push({ecommerce:null});
                    layer.push(payload);
                })
                .catch(err=>group('[cart] error', err));
        }

        function handleOtpCreateResponse(text, ok){
            if(!ok){ log('[otp-create] not OK'); return; }
            try{
                const j = JSON.parse(text||'{}');
                if(j && (j.success===false || j.error)) { group('[otp-create] error', j); return; }
            }catch(e){}
            group('[otp-create] push generate_lead');
            const layer = dl();
            layer.push({ecommerce:null});
            layer.push({event:'generate_lead', ecommerce:{currency:'UAH', value:0}});
        }

        function markLoginAfterRedirect(method){ try{ sessionStorage.setItem(LOGIN_FLAG, method||'Google'); }catch(e){} }
        function pushLogin(method){
            const layer = dl();
            layer.push({ecommerce:null});
            layer.push({event:'login', ecommerce:{method: method||'Google'}});
        }

        function handleOtpLoginResponse(text, httpOk){
            let j = null;
            try{ j = JSON.parse(text||'{}'); }catch(e){}
            const hasError = (j && (j.errors===true || j.error));
            if(hasError){
                group('[otp-login] error', j);
                const layer = dl();
                layer.push({ecommerce:null});
                layer.push({event:'login_error', ecommerce:{method:'Phone', message: (j && j.message) || 'OTP error'}});
                return;
            }
            if(httpOk){ // успех
                group('[otp-login] success → push login');
                const layer = dl();
                layer.push({ecommerce:null});
                layer.push({event:'login', ecommerce:{method:'Phone'}});
            }else{
                log('[otp-login] http not ok');
            }
        }

        if (window.fetch){
            const origFetch = window.fetch;
            window.fetch = function(input, init){
                const url = (typeof input === 'string') ? input : (input && input.url) || '';
                const cartCall   = isCart(url);
                const otpCreate  = isOtpCreate(url);
                const loginCall  = isLoginPost(url);
                const otpLogin   = isOtpLogin(url);
                if (cartCall || otpCreate || loginCall || otpLogin) log('[fetch]', url);

                return origFetch(input, init).then(resp=>{
                    if (cartCall){
                        try{ resp.clone().text().finally(()=>pingCart(url)); }catch(e){ pingCart(url); }
                    }
                    if (otpCreate){
                        try{
                            resp.clone().text().then(t=>handleOtpCreateResponse(t, resp.ok))
                                .catch(()=>handleOtpCreateResponse('', resp.ok));
                        }catch(e){ handleOtpCreateResponse('', resp.ok); }
                    }
                    if (loginCall && resp && resp.ok){
                        // дальше будет редирект на account — пушнем после загрузки
                        markLoginAfterRedirect('Google');
                    }
                    if (otpLogin){
                        try{
                            resp.clone().text().then(t=>handleOtpLoginResponse(t, resp.ok))
                                .catch(()=>handleOtpLoginResponse('', resp.ok));
                        }catch(e){ handleOtpLoginResponse('', resp.ok); }
                    }
                    return resp;
                });
            };
        }

        if (window.XMLHttpRequest){
            const origOpen = XMLHttpRequest.prototype.open;
            const origSend = XMLHttpRequest.prototype.send;

            XMLHttpRequest.prototype.open = function(method, url){
                this.__isCart      = isCart(url||'');
                this.__isOtpCreate = isOtpCreate(url||'');
                this.__isLoginPost = isLoginPost(url||'');
                this.__isOtpLogin  = isOtpLogin(url||'');
                this.__url = url || '';
                if (this.__isCart || this.__isOtpCreate || this.__isLoginPost || this.__isOtpLogin) log('[xhr open]', method, url);
                return origOpen.apply(this, arguments);
            };

            XMLHttpRequest.prototype.send = function(){
                this.addEventListener('load', ()=>{
                    if (this.__isCart)      pingCart(this.__url);
                    if (this.__isOtpCreate) handleOtpCreateResponse(String(this.responseText||''), this.status>=200 && this.status<300);
                    if (this.__isLoginPost && this.status>=200 && this.status<400) markLoginAfterRedirect('Google');
                    if (this.__isOtpLogin)  handleOtpLoginResponse(String(this.responseText||''), this.status>=200 && this.status<300);
                });
                return origSend.apply(this, arguments);
            };
        }

        if (!window.__gtmCartPingDone){
            window.__gtmCartPingDone = true;
            document.addEventListener('DOMContentLoaded', ()=>{
                log('[init] initial cart ping');
                pingCart(location.pathname + location.search);

                let pending=null;
                try{ pending = sessionStorage.getItem(LOGIN_FLAG); }catch(e){}
                if (pending){
                    try{ sessionStorage.removeItem(LOGIN_FLAG); }catch(e){}
                    group('[login-post] push login', pending);
                    pushLogin(pending); // 'Google'
                }
            });
        }
    })();
</script>

<!-- End Google Tag Manager by MagePal -->
