<?php
/**
 * Copyright © MagePal LLC. All rights reserved.
 * See COPYING.txt for license details.
 * http://www.magepal.com | support@magepal.com
 */

/** @var $block MagePal\GoogleTagManager\Block\DataLayer **/
$dataLayerName = $block->getDataLayerName();
$accountId = $block->getAccountId();
$containerCode = $block->getEmbeddedCode();
?>

<!-- Google Tag Manager by MagePal -->
<script type="text/javascript">
    window.<?= /* @noEscape */ $dataLayerName ?> = window.<?= /* @noEscape */ $dataLayerName ?> || [];
    window.<?= /* @noEscape */ $dataLayerName ?>.push({ ecommerce: null });

<?php if (!$block->isGdprEnabled() && $block->addJsInHead() && !$block->isAdvancedSettingsEnabled()): ?>
    <?= /* @noEscape */ $block->getDataLayerJs() ?>
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
            new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
        j=d.createElement(s),dl=l!='<?= /* @noEscape */ $dataLayerName ?>'?'&l='+l:'';j.async=true;j.src=
        'https://www.googletagmanager.com/gtm.js?id='+i+dl<?= /* @noEscape */ $containerCode ? "+'{$containerCode}'" : '' ?>;f.parentNode.insertBefore(j,f);
    })(window,document,'script','<?= /* @noEscape */ $dataLayerName ?>','<?= /* @noEscape */ $accountId ?>');
<?php endif; ?>
</script>

<?php if ($block->isAdvancedSettingsEnabled()): ?>
    <?= /* @noEscape */ $block->getDataLayerJs() ?>
    <?= /* @noEscape */ $block->getAdvancedSettingsJsCode() ?>
<?php endif; ?>

<?php if (($block->isGdprEnabled() || !$block->addJsInHead()) && !$block->isAdvancedSettingsEnabled()) : ?>
<script type="text/x-magento-init">
    {
        "*": {
            "magepalGtmDatalayer": {
                "isCookieRestrictionModeEnabled": <?= /* @noEscape */ $block->isCookieRestrictionModeEnabled() ?>,
                "currentWebsite": <?= /* @noEscape */ $block->getCurrentWebsiteId() ?>,
                "cookieName": "<?= /* @noEscape */ $block->getCookieRestrictionName() ?>",
                "dataLayer": "<?= /* @noEscape */ $block->getDataLayerName() ?>",
                "accountId": "<?= /* @noEscape */ $block->getAccountId() ?>",
                "data": <?= /* @noEscape */ $block->getDataLayerJson() ?>,
                "isGdprEnabled": <?= /* @noEscape */ $block->isGdprEnabled() ?>,
                "gdprOption": <?= /* @noEscape */ $block->getGdprOption() ?>,
                "addJsInHeader": <?= /* @noEscape */ $block->addJsInHead() ?>,
                "containerCode": "<?= /* @noEscape */ $block->getEmbeddedCode() ?>"
            }
        }
    }
</script>
<?php else : ?>
<script type="text/x-magento-init">
    {
        "*": {
            "magepalGtmDatalayer": {
                "dataLayer": "<?= /* @noEscape */ $block->getDataLayerName() ?>"
            }
        }
    }
</script>
<?php $block->clearDataLayerSessionInfo(); ?>
<?php endif; ?>
<script>
    (function () {
        if (window.__gtmHookInstalled) return;
        window.__gtmHookInstalled = true;

        const dataLayerName     = <?= json_encode($dataLayerName) ?>;
        const cartEventEndpoint = <?= json_encode($block->getUrl('gtm/cart/event')) ?>;

        const DEBUG      = (localStorage.getItem('gtmDebug') === '1');
        const LOGIN_FLAG = '__gtmLoginPending';

        function log() { if (DEBUG) try { console.log('[GTM]', ...arguments); } catch (e) {} }
        function group(title, payload) {
            if (!DEBUG) return;
            try { console.groupCollapsed(title); if (payload !== undefined) console.log(payload); console.groupEnd(); } catch (e) {}
        }

        function dl() {
            window[dataLayerName] = window[dataLayerName] || [];
            return window[dataLayerName];
        }

        // Debug: log every push
        (function patchDL() {
            if (!DEBUG) return;
            const layer = dl();
            if (layer.__patched) return;
            const origPush = layer.push.bind(layer);
            layer.push = function () {
                for (const arg of arguments) {
                    const ev = arg && arg.event ? ` ${arg.event}` : '';
                    group(`[DL] push${ev}`, arg);
                }
                return origPush(...arguments);
            };
            layer.__patched = true;
        })();

        // --------- URL matchers ----------
        function isCart(url)       { return /\/checkout\/(?:cart\/(?:add|delete|update|updateItemQty|remove)|sidebar\/(?:updateItemQty|removeItem))/.test(String(url || '')); }
        function isOtpCreate(url)  { return /\/otplogin\/account\/sendotpcreate(?:\/|\?|$)/i.test(String(url || '')); } // generate_lead
        function isSendOtp(url)    { return /\/otplogin\/account\/sendotp(?:\/|\?|$)/i.test(String(url || '')); }       // login → Phone (отправка кода)
        function isOtpLogin(url)   { return /\/otplogin\/account\/otplogin(?:\/|\?|$)/i.test(String(url || '')); }      // login → Phone (подтверждение кода)
        function isLoginPost(url)  { return /\/customer\/account\/loginPost(?:\/|\?|$)/i.test(String(url || '')); }     // login → Google (или стандарт)

        // --------- CART ---------
        function pingCart(originalRequestUrl) {
            const url = cartEventEndpoint + '?src=' + encodeURIComponent(originalRequestUrl || '');
            group('[cart] ping → ' + url);
            fetch(url, { credentials: 'same-origin' })
                .then(r => r.json())
                .then(payload => {
                    if (!payload || !payload.event) { log('[cart] skip'); return; }
                    group('[cart] payload', payload);
                    const layer = dl();
                    layer.push({ ecommerce: null });
                    layer.push(payload);
                })
                .catch(err => group('[cart] error', err));
        }

        // --------- LEAD (OTP create) ---------
        function handleOtpCreateResponse(respText, ok) {
            if (!ok) { log('[otp-create] not OK'); return; }
            try {
                const j = JSON.parse(respText || '{}');
                if (j && (j.success === false || j.error)) { group('[otp-create] error', j); return; }
            } catch (e) {}
            group('[otp-create] push generate_lead');
            const layer = dl();
            layer.push({ ecommerce: null });
            layer.push({ event: 'generate_lead', ecommerce: { currency: 'UAH', value: 0 } });
        }

        // --------- LOGIN FLAG with priority Phone > Google ---------
        function setLoginFlag(method) {
            try {
                const cur = sessionStorage.getItem(LOGIN_FLAG);
                if (cur === 'Phone') return;
                if (cur && cur === method) return;
                sessionStorage.setItem(LOGIN_FLAG, method);
            } catch (e) {}
        }
        function takeLoginFlag() {
            try {
                const v = sessionStorage.getItem(LOGIN_FLAG);
                sessionStorage.removeItem(LOGIN_FLAG);
                return v;
            } catch (e) { return null; }
        }

        // --------- PUSH LOGIN (single-shot) ---------
        function pushLogin(method) {
            if (window.__gtmLoginPushed) return;
            window.__gtmLoginPushed = true;
            const layer = dl();
            layer.push({ ecommerce: null });
            layer.push({ event: 'login', ecommerce: { method: method || 'Google' } });
        }

        // --------- fetch hook ----------
        if (window.fetch) {
            const originalFetch = window.fetch;
            window.fetch = function (input, init) {
                const url = (typeof input === 'string') ? input : (input && input.url) || '';
                const _isCart      = isCart(url);
                const _isOtpCreate = isOtpCreate(url);
                const _isSendOtp   = isSendOtp(url);
                const _isOtpLogin  = isOtpLogin(url);
                const _isLoginPost = isLoginPost(url);
                if (_isCart || _isOtpCreate || _isSendOtp || _isOtpLogin || _isLoginPost) log('[fetch]', url);

                return originalFetch(input, init).then(response => {
                    if (_isCart) {
                        try { response.clone().text().finally(() => pingCart(url)); } catch (e) { pingCart(url); }
                    }
                    if (_isOtpCreate) {
                        try { response.clone().text().then(t => handleOtpCreateResponse(t, response.ok)).catch(() => handleOtpCreateResponse('', response.ok)); }
                        catch (e) { handleOtpCreateResponse('', response.ok); }
                    }
                    if ((_isSendOtp || _isOtpLogin) && response && response.ok) {
                        setLoginFlag('Phone');
                    }
                    if (_isLoginPost && response && response.ok) {
                        const cur = sessionStorage.getItem(LOGIN_FLAG);
                        if (cur !== 'Phone') setLoginFlag('Google');
                    }
                    return response;
                });
            };
        }

        // --------- XHR hook ----------
        if (window.XMLHttpRequest) {
            const origOpen = XMLHttpRequest.prototype.open;
            const origSend = XMLHttpRequest.prototype.send;

            XMLHttpRequest.prototype.open = function (method, url) {
                this.__isCart      = isCart(url || '');
                this.__isOtpCreate = isOtpCreate(url || '');
                this.__isSendOtp   = isSendOtp(url || '');
                this.__isOtpLogin  = isOtpLogin(url || '');
                this.__isLoginPost = isLoginPost(url || '');
                this.__url = url || '';
                if (this.__isCart || this.__isOtpCreate || this.__isSendOtp || this.__isOtpLogin || this.__isLoginPost) {
                    log('[xhr open]', method, url);
                }
                return origOpen.apply(this, arguments);
            };

            XMLHttpRequest.prototype.send = function () {
                this.addEventListener('load', () => {
                    const ok = this.status >= 200 && this.status < 300;
                    if (this.__isCart)      pingCart(this.__url);
                    if (this.__isOtpCreate) handleOtpCreateResponse(String(this.responseText || ''), ok);
                    if ((this.__isSendOtp || this.__isOtpLogin) && ok) setLoginFlag('Phone');
                    if (this.__isLoginPost && ok) {
                        const cur = sessionStorage.getItem(LOGIN_FLAG);
                        if (cur !== 'Phone') setLoginFlag('Google');
                    }
                });
                return origSend.apply(this, arguments);
            };
        }

        // --------- First load: cart ping + deferred login push ----------
        if (!window.__gtmCartPingDone) {
            window.__gtmCartPingDone = true;
            document.addEventListener('DOMContentLoaded', () => {
                log('[init] initial cart ping');
                try { pingCart(location.pathname + location.search); } catch (e) {}

                const pending = takeLoginFlag();
                if (pending) {
                    group('[login] push after redirect', pending);
                    pushLogin(pending);
                }
            });
        }
    })();
</script>

<!-- End Google Tag Manager by MagePal -->
